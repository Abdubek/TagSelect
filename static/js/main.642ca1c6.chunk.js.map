{"version":3,"sources":["assets/icons/repository.svg","assets/icons/arrow.svg","utils.tsx","components/TagSelect/TagSelect.tsx","components/Checkbox/index.tsx","components/TagSelect/TagSelectItem.tsx","components/TagSelect/index.tsx","reportWebVitals.ts","index.tsx"],"names":["TagSelect","children","onChange","placeholder","ref","useRef","useState","isOpen","setOpen","context","useContext","TagSelectContext","useOnClickOutside","e","document","addEventListener","listener","evt","stopPropagation","removeEventListener","useEffect","state","className","onClick","preventDefault","src","Icon","alt","length","map","tag","name","id","ArrowIcon","width","height","Checkbox","label","props","type","TagSelectItem","value","Error","checked","includes","val","target","update","prevTags","filter","handleChange","defaultValue","ctx","React","createContext","Provider","createCtx","TagSelectProvider","TagSelectWrapper","Item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","console","log","version","item","getElementById"],"mappings":"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","file":"static/js/main.642ca1c6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/repository.705f3c38.svg\";","export default __webpack_public_path__ + \"static/media/arrow.27751c64.svg\";","import React, { useEffect } from \"react\";\n\nexport function createCtx<A>(defaultValue: A) {\n  type UpdateType = React.Dispatch<React.SetStateAction<typeof defaultValue>>;\n  const defaultUpdate: UpdateType = () => defaultValue;\n  const ctx = React.createContext({\n    state: defaultValue,\n    update: defaultUpdate,\n  });\n  function Provider(props: React.PropsWithChildren<{}>) {\n    const [state, update] = React.useState(defaultValue);\n    return <ctx.Provider value={{ state, update }} {...props} />;\n  }\n  return [ctx, Provider] as const;\n}\n\nexport const disableNextClick = () => {\n  const listener = (evt: any) => {\n    evt.stopPropagation();\n    document.removeEventListener(\"click\", listener, true);\n  };\n  document.addEventListener(\"click\", listener, true);\n};\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport \"./styles.css\";\nimport Icon from \"../../assets/icons/repository.svg\";\nimport ArrowIcon from \"../../assets/icons/arrow.svg\";\nimport { Props, TagSelectContext } from \"./index\";\nimport useOnClickOutside from \"use-onclickoutside\";\nimport { disableNextClick } from \"../../utils\";\n\nexport type Tag = {\n  id: number;\n  name: string;\n  version?: string;\n};\n\nconst TagSelect = ({ children, onChange, placeholder }: Props) => {\n  const ref = useRef(null);\n  const [isOpen, setOpen] = useState(false);\n  const context = useContext<any>(TagSelectContext);\n\n  useOnClickOutside(ref, (e) => {\n    setOpen(false);\n    disableNextClick();\n  });\n\n  useEffect(() => {\n    if (onChange) onChange(context.state);\n  }, [context.state]);\n\n  return (\n    <div className=\"tag-select\">\n      <div\n        className=\"tag-select__value\"\n        onClick={(e) => {\n          e.preventDefault();\n          setOpen(!isOpen);\n        }}\n      >\n        <div className=\"tag-select__icon\">\n          <img src={Icon} alt=\"repository\" />\n        </div>\n        <div className=\"tag-select__tags\">\n          {context.state.length ? (\n            context.state.map((tag: any) => (\n              <div key={tag.id} className=\"tag-select__tags-item\">\n                {tag.name}\n              </div>\n            ))\n          ) : (\n            <span className=\"tag-select__placeholder\">{placeholder}</span>\n          )}\n        </div>\n        <div className=\"tag-select__arrow\">\n          <img src={ArrowIcon} alt=\"arrow\" width={24} height={24} />\n        </div>\n      </div>\n      {isOpen && (\n        <div ref={ref} className=\"tag-select__dropdown\">\n          <ul className=\"tag-select__dropdown-list\">{children}</ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TagSelect;\n","import React from \"react\";\nimport \"./styles.css\";\n\ntype Props = {\n  label: string | React.ReactNode;\n};\n\nexport type CheckboxProps = Props & React.InputHTMLAttributes<HTMLInputElement>;\n\nconst Checkbox = ({ label, ...props }: CheckboxProps) => {\n  return (\n    <label className=\"checkbox\">\n      <input type=\"checkbox\" {...props} />\n      <span className=\"checkbox__mark\" />\n      {label}\n    </label>\n  );\n};\n\nexport default Checkbox;\n","import React, { useContext } from \"react\";\nimport { TagSelectContext } from \".\";\nimport Checkbox from \"../Checkbox\";\nimport { Tag } from \"./TagSelect\";\n\ntype Props = {\n  name: string | React.ReactNode;\n  value: any;\n};\n\nconst TagSelectItem = ({ name, value }: Props) => {\n  const context = useContext(TagSelectContext);\n\n  if (!context) {\n    throw new Error(`TagSelectItem must be used within a TagSelect`);\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, val: Tag) => {\n    if (e.target.checked) {\n      context.update((prevTags) => [...prevTags, val]);\n    } else {\n      context.update((prevTags) => {\n        return prevTags.filter((tag) => tag.id !== val.id);\n      });\n    }\n  };\n\n  return (\n    <li className=\"tag-select__dropdown-list-item\">\n      <Checkbox\n        label={name}\n        checked={context.state.includes(value)}\n        onChange={(e) => handleChange(e, value)}\n      />\n    </li>\n  );\n};\n\nexport default TagSelectItem;\n","import TagSelect from \"./TagSelect\";\nimport { createCtx } from \"../../utils\";\nimport React from \"react\";\nimport TagSelectItem from \"./TagSelectItem\";\n\nexport const [TagSelectContext, TagSelectProvider] = createCtx<Array<any>>([]);\n\nexport type Props = {\n  children: React.ReactNode;\n  onChange?: (val: Array<any>) => void;\n  placeholder?: string;\n};\n\nconst TagSelectWrapper = (props: Props) => {\n  return (\n    <TagSelectProvider>\n      <TagSelect {...props} />\n    </TagSelectProvider>\n  );\n};\n\nTagSelectWrapper.Item = TagSelectItem;\n\nexport default TagSelectWrapper;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport TagSelect from \"./components/TagSelect\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst data = [\n  {\n    id: 1,\n    name: \"rake\",\n    version: \"12.7.0\",\n  },\n  {\n    id: 2,\n    name: \"postgres\",\n    version: \"12.7.0\",\n  },\n  {\n    id: 3,\n    name: \"mongodb\",\n    version: \"12.7.0\",\n  },\n  {\n    id: 4,\n    name: \"react\",\n    version: \"12.7.0\",\n  },\n  {\n    id: 5,\n    name: \"nestjs\",\n    version: \"12.7.0\",\n  },\n  {\n    id: 6,\n    name: \"react-hook-form\",\n    version: \"12.7.0\",\n  },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"layout\">\n      <TagSelect\n        onChange={(val) => console.log(val)}\n        placeholder=\"Выберите пакеты\"\n      >\n        {data.map((item) => (\n          <TagSelect.Item\n            key={item.id}\n            value={item}\n            name={\n              <span className=\"flex flex-between\">\n                <span>{item.name}</span>\n                <span className=\"color-gray\">{item.version}</span>\n              </span>\n            }\n          />\n        ))}\n      </TagSelect>\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}